#!/bin/bash
# Build script optimizado para el contenedor de pentest
# Autor: Optimized for hayek-validator-kit

set -euo pipefail

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Funciones de logging
log() { echo -e "${BLUE}[$(date '+%H:%M:%S')]${NC} $1"; }
success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
warn() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
error() { echo -e "${RED}[ERROR]${NC} $1"; }

# Configuraci√≥n
IMAGE_NAME="hayek-solana-pentest"
TAG="latest"
DOCKERFILE="Dockerfile"

main() {
    log "üöÄ Starting optimized build for Hayek Solana Pentest Container"
    
    # Verificar Docker
    if ! command -v docker &> /dev/null; then
        error "Docker is not installed or not in PATH"
        exit 1
    fi
    
    # Verificar si Docker daemon est√° ejecut√°ndose
    if ! docker info &> /dev/null; then
        error "Docker daemon is not running"
        exit 1
    fi
    
    # Crear directorio de datos si no existe
    if [ ! -d "./data" ]; then
        log "Creating data directory for results..."
        mkdir -p ./data
        success "Data directory created"
    fi
    
    # Limpiar contenedores e im√°genes anteriores si existen
    if docker ps -a --format 'table {{.Names}}' | grep -q "hayek-solana-pentest"; then
        log "Stopping and removing existing container..."
        docker-compose down 2>/dev/null || true
        success "Existing container removed"
    fi
    
    # Verificar BuildKit
    if ! docker buildx version &> /dev/null; then
        warn "Docker BuildKit not available, using standard build"
        build_standard
    else
        log "Docker BuildKit detected, using optimized build"
        build_with_buildkit
    fi
    
    # Verificar que la imagen se construy√≥ correctamente
    if docker images | grep -q "$IMAGE_NAME"; then
        success "‚úÖ Image $IMAGE_NAME:$TAG built successfully"
        
        # Mostrar tama√±o de la imagen
        local size=$(docker images --format "table {{.Size}}" "$IMAGE_NAME:$TAG" | tail -n 1)
        log "üì¶ Image size: $size"
        
        # Mostrar informaci√≥n de capas
        log "üîç Image layers:"
        docker history --no-trunc "$IMAGE_NAME:$TAG" | head -10
        
    else
        error "‚ùå Build failed - image not found"
        exit 1
    fi
    
    # Test r√°pido del contenedor
    log "üß™ Testing container startup..."
    if docker run --rm "$IMAGE_NAME:$TAG" which nmap httpx nuclei > /dev/null 2>&1; then
        success "‚úÖ Container test passed - all tools available"
    else
        warn "‚ö†Ô∏è  Container test failed - some tools might be missing"
    fi
    
    success "üéâ Build completed successfully!"
    log "üí° Usage:"
    log "   docker-compose up -d                      # Start container"
    log "   docker-compose exec hayek_solana_pentest bash  # Access container"
    log "   ./aut_pentest_solana_et1_v3.12.sh <IP>         # Run pentest"
}

build_with_buildkit() {
    log "Building with BuildKit (parallel, cached, optimized)..."
    
    # Habilitar BuildKit expl√≠citamente
    export DOCKER_BUILDKIT=1
    
    # Build con optimizaciones
    docker build \
        --progress=plain \
        --no-cache=false \
        --pull \
        --tag "$IMAGE_NAME:$TAG" \
        --file "$DOCKERFILE" \
        . || {
            error "BuildKit build failed"
            exit 1
        }
    
    success "BuildKit build completed"
}

build_standard() {
    log "Building with standard Docker build..."
    
    docker build \
        --tag "$IMAGE_NAME:$TAG" \
        --file "$DOCKERFILE" \
        . || {
            error "Standard build failed"
            exit 1
        }
    
    success "Standard build completed"
}

# Funci√≥n para limpiar im√°genes antiguas
cleanup() {
    log "üßπ Cleaning up old images..."
    
    # Eliminar im√°genes <none>
    docker image prune -f &> /dev/null || true
    
    # Eliminar im√°genes antiguas del mismo proyecto
    docker images | grep "$IMAGE_NAME" | grep -v "$TAG" | awk '{print $3}' | xargs -r docker rmi &> /dev/null || true
    
    success "Cleanup completed"
}

# Funci√≥n de ayuda
show_help() {
    echo "Usage: $0 [options]"
    echo ""
    echo "Options:"
    echo "  -h, --help     Show this help message"
    echo "  -c, --clean    Clean old images before building"
    echo "  --no-test      Skip container testing"
    echo ""
    echo "Examples:"
    echo "  $0              # Build with default options"
    echo "  $0 --clean     # Clean old images and build"
}

# Procesar argumentos
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -c|--clean)
            cleanup
            shift
            ;;
        --no-test)
            SKIP_TEST=true
            shift
            ;;
        *)
            error "Unknown option: $1"
            show_help
            exit 1
            ;;
    esac
done

# Ejecutar funci√≥n principal
main
